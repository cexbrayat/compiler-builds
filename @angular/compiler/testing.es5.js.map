{"version":3,"file":"testing.es5.js","sources":["../../../../../packages/compiler/testing/index.ts","../../../../../packages/compiler/testing/src/testing.ts","../../../../../packages/compiler/testing/src/pipe_resolver_mock.ts","../../../../../packages/compiler/testing/src/ng_module_resolver_mock.ts","../../../../../packages/compiler/testing/src/directive_resolver_mock.ts","../../../../../packages/compiler/testing/src/schema_registry_mock.ts","../../../../../packages/compiler/testing/src/resource_loader_mock.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the compiler/testing package.\n */\n\nexport * from './src/testing';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all APIs of the compiler package.\n *\n * <div class=\"callout is-critical\">\n *   <header>Unstable APIs</header>\n *   <p>\n *     All compiler apis are currently considered experimental and private!\n *   </p>\n *   <p>\n *     We expect the APIs in this package to keep on changing. Do not rely on them.\n *   </p>\n * </div>\n */\nexport * from './resource_loader_mock';\nexport * from './schema_registry_mock';\nexport * from './directive_resolver_mock';\nexport * from './ng_module_resolver_mock';\nexport * from './pipe_resolver_mock';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileReflector, PipeResolver, core} from '@angular/compiler';\n\nexport class MockPipeResolver extends PipeResolver {\n  private _pipes = new Map<core.Type, core.Pipe>();\n\n  constructor(refector: CompileReflector) { super(refector); }\n\n  /**\n   * Overrides the {@link Pipe} for a pipe.\n   */\n  setPipe(type: core.Type, metadata: core.Pipe): void { this._pipes.set(type, metadata); }\n\n  /**\n   * Returns the {@link Pipe} for a pipe:\n   * - Set the {@link Pipe} to the overridden view when it exists or fallback to the\n   * default\n   * `PipeResolver`, see `setPipe`.\n   */\n  resolve(type: core.Type, throwIfNotFound = true): core.Pipe {\n    let metadata = this._pipes.get(type);\n    if (!metadata) {\n      metadata = super.resolve(type, throwIfNotFound) !;\n    }\n    return metadata;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileReflector, NgModuleResolver, core} from '@angular/compiler';\n\nexport class MockNgModuleResolver extends NgModuleResolver {\n  private _ngModules = new Map<core.Type, core.NgModule>();\n\n  constructor(reflector: CompileReflector) { super(reflector); }\n\n  /**\n   * Overrides the {@link NgModule} for a module.\n   */\n  setNgModule(type: core.Type, metadata: core.NgModule): void {\n    this._ngModules.set(type, metadata);\n  }\n\n  /**\n   * Returns the {@link NgModule} for a module:\n   * - Set the {@link NgModule} to the overridden view when it exists or fallback to the\n   * default\n   * `NgModuleResolver`, see `setNgModule`.\n   */\n  resolve(type: core.Type, throwIfNotFound = true): core.NgModule {\n    return this._ngModules.get(type) || super.resolve(type, throwIfNotFound) !;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CompileReflector, DirectiveResolver, core} from '@angular/compiler';\n\n/**\n * An implementation of {@link DirectiveResolver} that allows overriding\n * various properties of directives.\n */\nexport class MockDirectiveResolver extends DirectiveResolver {\n  private _directives = new Map<core.Type, core.Directive>();\n\n  constructor(reflector: CompileReflector) { super(reflector); }\n\n  resolve(type: core.Type): core.Directive;\n  resolve(type: core.Type, throwIfNotFound: true): core.Directive;\n  resolve(type: core.Type, throwIfNotFound: boolean): core.Directive|null;\n  resolve(type: core.Type, throwIfNotFound = true): core.Directive|null {\n    return this._directives.get(type) || super.resolve(type, throwIfNotFound);\n  }\n\n  /**\n   * Overrides the {@link core.Directive} for a directive.\n   */\n  setDirective(type: core.Type, metadata: core.Directive): void {\n    this._directives.set(type, metadata);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementSchemaRegistry, core} from '@angular/compiler';\n\nexport class MockSchemaRegistry implements ElementSchemaRegistry {\n  constructor(\n      public existingProperties: {[key: string]: boolean},\n      public attrPropMapping: {[key: string]: string},\n      public existingElements: {[key: string]: boolean}, public invalidProperties: Array<string>,\n      public invalidAttributes: Array<string>) {}\n\n  hasProperty(tagName: string, property: string, schemas: core.SchemaMetadata[]): boolean {\n    const value = this.existingProperties[property];\n    return value === void 0 ? true : value;\n  }\n\n  hasElement(tagName: string, schemaMetas: core.SchemaMetadata[]): boolean {\n    const value = this.existingElements[tagName.toLowerCase()];\n    return value === void 0 ? true : value;\n  }\n\n  allKnownElementNames(): string[] { return Object.keys(this.existingElements); }\n\n  securityContext(selector: string, property: string, isAttribute: boolean): core.SecurityContext {\n    return core.SecurityContext.NONE;\n  }\n\n  getMappedPropName(attrName: string): string { return this.attrPropMapping[attrName] || attrName; }\n\n  getDefaultComponentElementName(): string { return 'ng-component'; }\n\n  validateProperty(name: string): {error: boolean, msg?: string} {\n    if (this.invalidProperties.indexOf(name) > -1) {\n      return {error: true, msg: `Binding to property '${name}' is disallowed for security reasons`};\n    } else {\n      return {error: false};\n    }\n  }\n\n  validateAttribute(name: string): {error: boolean, msg?: string} {\n    if (this.invalidAttributes.indexOf(name) > -1) {\n      return {\n        error: true,\n        msg: `Binding to attribute '${name}' is disallowed for security reasons`\n      };\n    } else {\n      return {error: false};\n    }\n  }\n\n  normalizeAnimationStyleProperty(propName: string): string { return propName; }\n  normalizeAnimationStyleValue(camelCaseProp: string, userProvidedProp: string, val: string|number):\n      {error: string, value: string} {\n    return {error: null !, value: val.toString()};\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ResourceLoader} from '@angular/compiler';\n\n/**\n * A mock implementation of {@link ResourceLoader} that allows outgoing requests to be mocked\n * and responded to within a single test, without going to the network.\n */\nexport class MockResourceLoader extends ResourceLoader {\n  private _expectations: _Expectation[] = [];\n  private _definitions = new Map<string, string>();\n  private _requests: _PendingRequest[] = [];\n\n  get(url: string): Promise<string> {\n    const request = new _PendingRequest(url);\n    this._requests.push(request);\n    return request.getPromise();\n  }\n\n  hasPendingRequests() { return !!this._requests.length; }\n\n  /**\n   * Add an expectation for the given URL. Incoming requests will be checked against\n   * the next expectation (in FIFO order). The `verifyNoOutstandingExpectations` method\n   * can be used to check if any expectations have not yet been met.\n   *\n   * The response given will be returned if the expectation matches.\n   */\n  expect(url: string, response: string) {\n    const expectation = new _Expectation(url, response);\n    this._expectations.push(expectation);\n  }\n\n  /**\n   * Add a definition for the given URL to return the given response. Unlike expectations,\n   * definitions have no order and will satisfy any matching request at any time. Also\n   * unlike expectations, unused definitions do not cause `verifyNoOutstandingExpectations`\n   * to return an error.\n   */\n  when(url: string, response: string) { this._definitions.set(url, response); }\n\n  /**\n   * Process pending requests and verify there are no outstanding expectations. Also fails\n   * if no requests are pending.\n   */\n  flush() {\n    if (this._requests.length === 0) {\n      throw new Error('No pending requests to flush');\n    }\n\n    do {\n      this._processRequest(this._requests.shift() !);\n    } while (this._requests.length > 0);\n\n    this.verifyNoOutstandingExpectations();\n  }\n\n  /**\n   * Throw an exception if any expectations have not been satisfied.\n   */\n  verifyNoOutstandingExpectations() {\n    if (this._expectations.length === 0) return;\n\n    const urls: string[] = [];\n    for (let i = 0; i < this._expectations.length; i++) {\n      const expectation = this._expectations[i];\n      urls.push(expectation.url);\n    }\n\n    throw new Error(`Unsatisfied requests: ${urls.join(', ')}`);\n  }\n\n  private _processRequest(request: _PendingRequest) {\n    const url = request.url;\n\n    if (this._expectations.length > 0) {\n      const expectation = this._expectations[0];\n      if (expectation.url == url) {\n        remove(this._expectations, expectation);\n        request.complete(expectation.response);\n        return;\n      }\n    }\n\n    if (this._definitions.has(url)) {\n      const response = this._definitions.get(url);\n      request.complete(response == null ? null : response);\n      return;\n    }\n\n    throw new Error(`Unexpected request ${url}`);\n  }\n}\n\nclass _PendingRequest {\n  resolve: (result: string) => void;\n  reject: (error: any) => void;\n  promise: Promise<string>;\n\n  constructor(public url: string) {\n    this.promise = new Promise((res, rej) => {\n      this.resolve = res;\n      this.reject = rej;\n    });\n  }\n\n  complete(response: string|null) {\n    if (response == null) {\n      this.reject(`Failed to load ${this.url}`);\n    } else {\n      this.resolve(response);\n    }\n  }\n\n  getPromise(): Promise<string> { return this.promise; }\n}\n\nclass _Expectation {\n  url: string;\n  response: string;\n  constructor(url: string, response: string) {\n    this.url = url;\n    this.response = response;\n  }\n}\n\nfunction remove<T>(list: T[], el: T): void {\n  const index = list.indexOf(el);\n  if (index > -1) {\n    list.splice(index, 1);\n  }\n}\n"],"names":[],"mappings":"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"}